import { GoogleGenerativeAI } from '@google/generative-ai';

const getGenAI = () => {
  const apiKey = process.env.GEMINI_API_KEY;
  if (!apiKey) {
    throw new Error('GEMINI_API_KEY is not configured');
  }
  return new GoogleGenerativeAI(apiKey);
};

export async function refineText(text: string, context: string = 'general') {
  const genAI = getGenAI();
  const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

  const prompts: Record<string, string> = {
    bio: `Refine this freelancer's bio to sound more professional, engaging, and concise. Keep it under 150 words:\n\n${text}`,
    project: `Refine this project description to be clear, professional, and highlight key achievements:\n\n${text}`,
    experience: `Refine this work experience description to be professional and achievement-focused:\n\n${text}`,
    general: `Improve this text to be more professional and well-written:\n\n${text}`,
  };

  const prompt = prompts[context] || prompts.general;
  const result = await model.generateContent(prompt);
  const response = result.response;
  return response.text();
}

export async function generateCV(portfolioData: any) {
  const genAI = getGenAI();
  const model = genAI.getGenerativeModel({ model: 'gemini-2.5-pro' });

  const prompt = `Generate a professional CV as clean, production-ready HTML with TailwindCSS classes. Use this data:

Name: ${portfolioData.user.name}
Email: ${portfolioData.user.email}
Bio: ${portfolioData.user.refined_bio || portfolioData.user.bio}

Experience:
${portfolioData.experience.map((exp: any) => `- ${exp.role} at ${exp.company_name} (${exp.start_date} - ${exp.end_date || 'Present'})\n  ${exp.refined_description || exp.description}`).join('\n')}

Education:
${portfolioData.education.map((edu: any) => `- ${edu.degree} in ${edu.field_of_study} from ${edu.institution_name} (${edu.start_year} - ${edu.end_year || 'Present'})`).join('\n')}

Skills:
${portfolioData.skills.map((skill: any) => `${skill.skill_name} (${skill.proficiency})`).join(', ')}

Projects:
${portfolioData.projects.map((proj: any) => `- ${proj.title}: ${proj.refined_description || proj.description}`).join('\n')}

IMPORTANT INSTRUCTIONS:
1. Return ONLY the HTML content, no markdown, no explanations
2. Do NOT include phrases like "Here is your CV" or "Generated by AI"
3. Use TailwindCSS classes for styling
4. Structure: Header (name, contact) → Professional Summary → Core Competencies → Technical Skills → Experience → Education → Projects → References
5. Use clean typography: text-gray-800, font-semibold for titles, proper spacing
6. Section titles in text-violet-600
7. Use bg-gray-50 for skill/project cards with rounded-xl
8. Make it print-ready and professional
9. No asterisks or markdown symbols
10. Keep it concise and one-page optimized

Return the complete HTML structure starting with a div container.`;

  const result = await model.generateContent(prompt);
  const response = result.response;
  return response.text();
}
